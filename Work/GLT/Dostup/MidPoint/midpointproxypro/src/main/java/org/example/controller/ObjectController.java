//package org.example.controller;
//
//import io.swagger.v3.oas.annotations.OpenAPIDefinition;
//import io.swagger.v3.oas.annotations.Operation;
//import io.swagger.v3.oas.annotations.info.Info;
//import io.swagger.v3.oas.annotations.security.SecurityRequirement;
//import lombok.RequiredArgsConstructor;
//import lombok.extern.slf4j.Slf4j;
//import org.example.dto.AttributeDelta;
//import org.example.model.filter.FilterRequest;
//import org.example.service.ObjectService;
//import org.springframework.data.domain.Page;
//import org.springframework.data.domain.Pageable;
//import org.springframework.http.ResponseEntity;
//import org.springframework.web.bind.annotation.*;
//import reactor.core.publisher.Mono;
//
//import java.util.List;
//import java.util.Map;
//import java.util.UUID;
//
//@RestController
//@RequestMapping("/api/object")
//@OpenAPIDefinition(info = @Info(title = "Create & update object API", version = "v1"))
//@SecurityRequirement(name = "basicAuth")
//@RequiredArgsConstructor
//@Slf4j
//public class ObjectController {
//
//    private final ObjectService objectService;
//
//    /**
//     * –°–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç –≤ MidPoint.
//     * @param objectType —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, user, role, org)
//     * @param fields —Å–ø–∏—Å–æ–∫ –ø–∞—Ä "name" –∏ "value"
//     * @param authorizationHeader –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (Basic auth)
//     * @return Map —Å OID —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
//     */
//
//    @Operation(summary = "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ Midpoint", description = "—Ç–∏–ø—ã —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: user, role, org")
//    @PostMapping("/{objectType}")
//    public Map<String, Object> createObject(
//            @PathVariable String objectType,
//            @RequestBody List<Map<String, Object>> fields,
//            @RequestHeader("Authorization") String authorizationHeader
//    ) {
//        log.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: {}", objectType);
//        return objectService.createObject(objectType, fields, authorizationHeader);
//    }
//
//    /**
//     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –æ–±—ä–µ–∫—Ç MidPoint (—á–∞—Å—Ç–∏—á–Ω–æ).
//     * @param objectType —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
//     * @param oid –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –æ–±—ä–µ–∫—Ç–∞
//     * @param updates —Å–ø–∏—Å–æ–∫ –∏–∑–º–µ–Ω–µ–Ω–∏–π (–º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π)
//     * @param authorizationHeader –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
//     * @return Mono —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
//     */
//
//    @Operation(summary = "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ Midpoint", description = "—Ç–∏–ø—ã –æ–±–Ω–æ–≤–ª—è–µ–º—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤: user, role, org")
//    @PutMapping("/{objectType}/{oid}")
//    public Mono<ResponseEntity<String>> updateObject(
//            @PathVariable String objectType,
//            @PathVariable UUID oid,
//            @RequestBody List<AttributeDelta> updates,
//            @RequestHeader("Authorization") String authorizationHeader
//    ) {
//        log.info("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {} —Å oid={}", objectType, oid);
//        return objectService.updateObject(objectType, oid, updates, authorizationHeader)
//                .map(ResponseEntity::ok);
//    }
//
//
//    @Operation(summary = "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –≤ Midpoint", description = "–£–¥–∞–ª—è–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ oid. –¢–∏–ø—ã: user, role, org")
//    @DeleteMapping("/{objectType}/{oid}")
//    public ResponseEntity<Void> deleteObject(
//            @PathVariable String objectType,
//            @PathVariable UUID oid,
//            @RequestHeader("Authorization") String authorizationHeader
//    ) {
//        log.info("üóëÔ∏è –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞: type={}, oid={}", objectType, oid);
//        objectService.deleteObject(objectType, oid, authorizationHeader);
//        return ResponseEntity.noContent().build();
//    }
//
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ archetype –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
//    @GetMapping("/getObjectFields/{archetype}")
//    public Map<String, Object>  getFieldsByArchetype(
//            @PathVariable String archetype,
//            Pageable pageable
//    ) {
//        return objectService.getFieldsByArchetypeOrByObjectType(archetype, pageable);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ archetype —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
//    @PostMapping("/getObjectFields/{archetype}")
//    public  Map<String, Object> searchFieldsByArchetypeAndFieldName(
//            @PathVariable String archetype,
//            @RequestBody(required = false) FilterRequest request,
//            Pageable pageable
//    ) {
//        return objectService.searchFieldsByArchetype(archetype, request, pageable);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ–ª–µ–π –ø–æ archetype –∏ oid —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
//    @PostMapping("/getObjectFields/{archetype}/{oid}")
//    public ResponseEntity<Map<String, Object>> getObjectValues(
//            @PathVariable String archetype,
//            @PathVariable UUID oid,
//            @RequestBody(required = false) FilterRequest request,
//            Pageable pageable
//    ) {
//        Map<String, Object> result = objectService.getFieldsByArchetypeAndOid(archetype, oid, request, pageable);
//        return ResponseEntity.ok(result);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ ext_object –∏ ext_whereclause –¥–ª—è –ø–æ–ª—è")
//    @PostMapping("/getObject/{archetype}/field/{fieldName}")
//    public Page<Map<String, Object>>  getByFieldName(
//            @PathVariable String archetype,
//            @PathVariable String fieldName,
//            @RequestBody(required = false) FilterRequest request,
//            Pageable pageable
//    ) {
//        return objectService.getByFieldNameAndArchetypeWithExtQuery(archetype, fieldName, request, pageable);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ objectType –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
//    @GetMapping("/getObjects/{objectType}")
//    public  Page<?> getFieldsByObjectType(
//            @PathVariable String objectType,
//            Pageable pageable
//    ) {
//        return objectService.getObjectsByObjectType(objectType, pageable);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ objectType —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π")
//    @PostMapping("/getObjects/{objectType}")
//    public Page<?> searchFieldsByObjectType(
//            @PathVariable String objectType,
//            @RequestBody(required = false) FilterRequest request,
//            Pageable pageable
//    ) {
//        return objectService.searchObjectsByObjectType(objectType, request, pageable);
//    }
//
//    @Operation(summary = "–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–µ–π –æ–±—ä–µ–∫—Ç–∞ –ø–æ archetype –∏ oid", description = "–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—è —Å –ø–æ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏")
//    @PostMapping("/getObjectFields/{objectType}/{archetype}/{oid}")
//    public Map<String, Object> getFieldsByArchetypeAndOid(
//            @PathVariable String objectType,
//            @PathVariable String archetype,
//            @PathVariable UUID oid,
//            @RequestBody(required = false) FilterRequest request,
//            Pageable pageable
//    ) {
//        return objectService.getFieldsByObjectTypeAndArchetypeAndOid(objectType, archetype, oid, request, pageable);
//    }
//
//}
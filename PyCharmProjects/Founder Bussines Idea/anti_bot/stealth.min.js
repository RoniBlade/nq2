// Убираем navigator.webdriver
Object.defineProperty(navigator, 'webdriver', {
  get: () => false
});

// Подменяем navigator.plugins
Object.defineProperty(navigator, 'plugins', {
  get: () => [1, 2, 3, 4, 5]
});

// Подменяем navigator.languages
Object.defineProperty(navigator, 'languages', {
  get: () => ['ru-RU', 'ru']
});

// Подменяем window.chrome
window.chrome = {
  runtime: {},
  // имитация расширений Chrome
  loadTimes: () => {},
  csi: () => {},
  app: {
    isInstalled: false,
  },
};

// Подменяем iframe.contentWindow
Object.defineProperty(HTMLIFrameElement.prototype, 'contentWindow', {
  get: function () {
    return window;
  }
});

// Подделка userAgentData (новое API)
if (navigator.userAgentData === undefined) {
  navigator.userAgentData = {
    brands: [{ brand: "Chromium", version: "114" }, { brand: "Not.A/Brand", version: "24" }],
    mobile: false,
    getHighEntropyValues: () => Promise.resolve({
      architecture: "x86",
      model: "",
      platform: "Windows",
      platformVersion: "10.0",
      uaFullVersion: "114.0.5735.199",
      fullVersionList: [{ brand: "Chromium", version: "114.0.5735.199" }]
    })
  };
}

// Подменяем разрешение экрана и цветовую глубину (на случай headless)
Object.defineProperty(screen, 'width', { get: () => 1920 });
Object.defineProperty(screen, 'height', { get: () => 1080 });
Object.defineProperty(screen, 'colorDepth', { get: () => 24 });
Object.defineProperty(navigator, 'webdriver', {
  get: () => undefined
})

// Эмулируем наличие медиадевайсов (камеры, микрофоны)
navigator.mediaDevices = {
  enumerateDevices: async () => [
    { kind: 'videoinput', label: 'Camera', deviceId: '123' },
    { kind: 'audioinput', label: 'Microphone', deviceId: '456' }
  ]
};

// Убираем подозрительный stack-trace у toString
const oldToString = Function.prototype.toString;
Function.prototype.toString = function () {
  if (this === navigator.webdriver.get) return "function get webdriver() { [native code] }";
  return oldToString.call(this);
};

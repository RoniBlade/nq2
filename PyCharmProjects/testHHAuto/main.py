import os
import re
import time
import json
import requests
from urllib.parse import urlencode

# ===================== OAuth =====================

class OAuthCredentials:
    def __init__(self, client_id, client_secret, auth_code=None, redirect_uri=None):
        self.client_id = client_id
        self.client_secret = client_secret
        self.auth_code = auth_code
        self.redirect_uri = redirect_uri
        self.access_token = None


# ================== –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç ==================

class HHAutoApply:
    BASE_URL = "https://api.hh.ru"
    OAUTH_URL = "https://hh.ru/oauth/token"      # –æ–±–º–µ–Ω code -> access_token
    AUTH_URL  = "https://hh.ru/oauth/authorize"  # –ø–æ–ª—É—á–µ–Ω–∏–µ authorization_code

    SEARCH_URL = f"{BASE_URL}/vacancies"         # –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π
    APPLY_URL  = f"{BASE_URL}/negotiations"      # –û—Ç–∫–ª–∏–∫ –Ω–∞ –≤–∞–∫–∞–Ω—Å–∏—é

    def __init__(self, credentials: OAuthCredentials, resume_id: str, applied_file: str = "applied_vacancies.txt"):
        self.credentials = credentials
        self.resume_id = resume_id
        self.access_token = None
        self.headers = {}
        self.applied_file = applied_file
        self.applied_vacancies = self._load_applied_vacancies()

    # -------- —Ñ–∞–π–ª —Å —É–∂–µ –æ—Ç–∫–ª–∏–∫–Ω—É—Ç—ã–º–∏ –≤–∞–∫–∞–Ω—Å–∏—è–º–∏ --------

    def _load_applied_vacancies(self):
        if os.path.exists(self.applied_file):
            with open(self.applied_file, "r", encoding="utf-8") as f:
                return set(line.strip() for line in f if line.strip())
        return set()

    def _save_applied_vacancy(self, vacancy_id: str):
        with open(self.applied_file, "a", encoding="utf-8") as f:
            f.write(f"{vacancy_id}\n")
        self.applied_vacancies.add(vacancy_id)

    # -------------------- OAuth --------------------

    def authorize(self):
        """
        –í—ã–≤–æ–¥–∏–º —Å—Å—ã–ª–∫—É, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª–æ–≥–∏–Ω–∏—Ç—Å—è –∏ –∫–æ–ø–∏—Ä—É–µ—Ç ?code=... —Å redirect_uri.
        """
        params = {
            "response_type": "code",
            "client_id": self.credentials.client_id,
            "redirect_uri": self.credentials.redirect_uri,
            "scope": "negotiations",  # –ø—Ä–∞–≤–æ –æ—Ç–∫–ª–∏–∫–∞—Ç—å—Å—è
        }
        auth_url = f"{self.AUTH_URL}?{urlencode(params)}"
        print("üîë –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ –¥–∞–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –æ—Ç–∫–ª–∏–∫–∞–º:")
        print(auth_url)
        self.credentials.auth_code = input("üîë –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ `code` –∏–∑ redirect_uri: ").strip()

    def get_access_token(self):
        payload = {
            "grant_type": "authorization_code",
            "client_id": self.credentials.client_id,
            "client_secret": self.credentials.client_secret,
            "code": self.credentials.auth_code,
            "redirect_uri": self.credentials.redirect_uri,
        }
        headers = {"Content-Type": "application/x-www-form-urlencoded"}
        resp = requests.post(self.OAUTH_URL, data=payload, headers=headers, timeout=30)

        if resp.status_code == 200:
            data = resp.json()
            self.credentials.access_token = data.get("access_token")
            self.access_token = self.credentials.access_token
            self.headers = {
                "Authorization": f"Bearer {self.access_token}",
                "User-Agent": (
                    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                    "AppleWebKit/537.36 (KHTML, like Gecko) "
                    "Chrome/119.0.0.0 Safari/537.36"
                )
            }
            print("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ.")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {resp.status_code} - {resp.text}")
            raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token")

    # ---------------- –£—Ç–∏–ª–∏—Ç—ã –≤—ã–≤–æ–¥–∞ ----------------

    def _brief(self, it: dict) -> str:
        emp = (it.get("employer") or {}).get("name") or "‚Äî"
        area = (it.get("area") or {}).get("name") or "‚Äî"
        url  = it.get("alternate_url") or f"https://hh.ru/vacancy/{it.get('id')}"
        return f"[{it.get('id')}] {it.get('name')} ‚Äî {emp} ({area})\n    {url}"

    # -------------- –õ–æ–∫–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –¢–û–õ–¨–ö–û –ù–ê–ó–í–ê–ù–ò–ï (—á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫) ---------------

    def _title_passes_blacklist(self, name: str):
        """
        –§–∏–ª—å—Ç—Ä –¢–û–õ–¨–ö–û –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é: –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Å—ë, –∫—Ä–æ–º–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        —Å –ø–ª–æ—Ö–∏–º–∏ –∫–ª—é—á–∞–º–∏ (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞, ML/AI, —Ñ—Ä–æ–Ω—Ç, —Ñ—É–ª—Å—Ç–µ–∫, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç –∏ —Ç.–ø.).
        –í–æ–∑–≤—Ä–∞—â–∞–µ–º (passed: bool, details: str).
        """
        title = (name or "").lower()

        bad = [
            # –∞–Ω–∞–ª–∏—Ç–∏–∫–∞/DS/ML/AI
            r"\b–∞–Ω–∞–ª–∏—Ç–∏–∫\b", r"\banalyst\b",
            r"\bdata\s*science\b", r"\bdata\s*scientist\b",
            r"\bmachine\s*learning\b", r"\bml\b", r"\bai\b", r"\bllm\b",
            r"\bbi\b", r"\bbusiness\s*intelligence\b", r"\bnlp\b", r"\bcv\b",
            # –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç / –Ω–µ-dev
            r"\b–º–µ–Ω–µ–¥–∂–µ—Ä\b", r"\bmanager\b", r"\bproduct\b", r"\bpm\b",
            r"\bteam\s*lead\b", r"\blead\b",
            # —Ñ—Ä–æ–Ω—Ç/—Ñ—É–ª—Å—Ç–µ–∫
            r"\bfull\s*stack\b", r"\bfullstack\b",
            r"\bfrontend\b", r"\breact\b", r"\bvue\b", r"\bangular\b",
            # –Ω–µ Python-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            r"\bgolang\b", r"\bnode\.?js\b", r"\berlang\b", r"\bc\+\+\b", r"\bc#\b", r"\b1c\b"
            # —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            r"\bqa\b", r"\b—Ç–µ—Å—Ç–∏—Ä–æ–≤—â–∏–∫\b", r"\b–∞–≤—Ç–æ—Ç–µ—Å—Ç",
        ]

        hits = [p for p in bad if re.search(p, title)]
        if hits:
            return False, f"–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å—Ç–æ–ø-—Å–ª–æ–≤–∞: {', '.join(hits)}"
        return True, "OK (—Å—Ç–æ–ø-—Å–ª–æ–≤ –Ω–µ—Ç)"

    # ---------------- –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π ----------------

    def fetch_vacancies(self,
                        experiences=(None, "between1And3", "between3And6"),
                        area=113,
                        pages=5,
                        per_page=100,
                        period=30,
                        excluded_text=("–ú–µ–Ω–µ–¥–∂–µ—Ä, –ê–Ω–∞–ª–∏—Ç–∏–∫, –∞–Ω–∞–ª–∏—Ç–∏–∫, Data, Data Science, ML, AI, "
                                       "Fullstack, LLM, Machine Learn")):
        """
        –ü–æ–∏—Å–∫ Python Backend –ø–æ —Ç—Ä—ë–º —Ä–µ–∂–∏–º–∞–º –æ–ø—ã—Ç–∞: None, 1‚Äì3, 3‚Äì6.
        –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—ä–µ–¥–∏–Ω—è—é—Ç—Å—è –±–µ–∑ –¥—É–±–ª–µ–π (–ø–æ id). –§–∏–ª—å—Ç—Ä –ª–æ–∫–∞–ª—å–Ω–æ ‚Äî blacklist –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é.
        """
        if not self.access_token:
            print("‚ùå –ù–µ—Ç access_token. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
            return []

        role_ids = ["96"]  # Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫
        base_text = "Java Developer"

        # –ù–µ–±–æ–ª—å—à–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å–ø–∏—Å–∫–∞ experience
        allowed = {None, "between1And3", "between3And6"}
        exp_list = []
        for e in experiences:
            if e in allowed:
                exp_list.append(e)
            else:
                print(f"‚ö†Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É—é –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π experience='{e}' (—Ä–∞–∑—Ä–µ—à–µ–Ω—ã: None, between1And3, between3And6)")

        seen_ids = set()
        merged = []

        def _do_query(exp_value, use_excluded: bool):
            label = exp_value if exp_value is not None else "None(–ª—é–±–æ–π)"
            print(f"\n===== ‚ñ∂Ô∏è –°—Ç–∞—Ä—Ç –ø–æ–∏—Å–∫–∞: experience={label}, excluded_text={'ON' if use_excluded else 'OFF'} =====")
            found_here = 0
            total_seen = 0

            for page in range(pages):
                params = {
                    "text": base_text,
                    "search_field": ["name", "company_name", "description"],
                    "area": area,                     # 113 = –†–§ (1=–ú–æ—Å–∫–≤–∞, 2=–°–ü–±)
                    "per_page": per_page,
                    "page": page,
                    "period": period,                 # 1/3/7/30/90
                    "order_by": "publication_time",
                    "professional_role": role_ids,
                    "work_format": ["REMOTE", "HYBRID"],  # –µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
                }
                if exp_value is not None:
                    params["experience"] = exp_value
                if use_excluded and excluded_text:
                    params["excluded_text"] = excluded_text

                resp = requests.get(self.SEARCH_URL, params=params, headers=self.headers, timeout=60)
                print(f"üîé {resp.url}")
                print(f"üì° –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {resp.status_code}")
                if resp.status_code != 200:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {resp.status_code} - {resp.text[:400]}")
                    break

                try:
                    data = resp.json()
                except json.JSONDecodeError:
                    print("‚ùå –û—à–∏–±–∫–∞ JSON-–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–¥–∞—á–∏.")
                    print(resp.text[:800])
                    break

                items = data.get("items", [])
                total_seen += len(items)
                print(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ {len(items)} –≤–∞–∫–∞–Ω—Å–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}.")

                for it in items:
                    vid = it.get("id")
                    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
                    print("‚Äî", self._brief(it))
                    # –õ–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                    passed, why = self._title_passes_blacklist(it.get("name", "") or "")
                    print(f"   ‚Æ° –§–∏–ª—å—Ç—Ä (blacklist): {'–ü–†–û–®–õ–ê' if passed else '–û–¢–ö–õ–û–ù–ï–ù–ê'} ‚Äî {why}")

                    if passed and vid not in seen_ids:
                        seen_ids.add(vid)
                        merged.append(it)
                        found_here += 1

                print(f"üßÆ –ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ: –≤—Å–µ–≥–æ {len(items)}, –¥–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ {found_here} (–Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω–æ –≤ —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ).")
                time.sleep(1.0)

            print(f"üìä –ò—Ç–æ–≥–æ –¥–ª—è experience={label}: –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ {total_seen}, –¥–æ–±–∞–≤–ª–µ–Ω–æ {found_here}.\n")

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è A: —Å excluded_text
        for exp in exp_list:
            _do_query(exp, use_excluded=True)

        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è B: –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º –ø—É—Å—Ç–æ ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –≤—Å–µ —Ä–µ–∂–∏–º—ã –±–µ–∑ excluded_text
        if not merged:
            print("‚Ü©Ô∏è –ü—É—Å—Ç–æ –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–æ—Ö–æ–¥–∞. –ü—Ä–æ–±—É–µ–º —Ä–µ—Ç—Ä–∞–π –±–µ–∑ excluded_text –ø–æ –≤—Å–µ–º —Ä–µ–∂–∏–º–∞–º –æ–ø—ã—Ç–∞.")
            for exp in exp_list:
                _do_query(exp, use_excluded=False)

        print(f"üß∑ –°–≤–æ–¥–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∂–∏–º–æ–≤ ‚Äî {len(merged)}.")
        return merged[:200]

    # ---------------- –û—Ç–∫–ª–∏–∫–∏ ----------------

    def apply_to_vacancies(self, vacancies, message=None, delay_seconds=2.0):
        """
        –û—Ç–∫–ª–∏–∫ –Ω–∞ —Å–ø–∏—Å–æ–∫ –≤–∞–∫–∞–Ω—Å–∏–π. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∏ –æ—à–∏–±–∫–∏ 400/403.
        """
        if not self.access_token:
            print("‚ùå –ù–µ—Ç access_token. –°–Ω–∞—á–∞–ª–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å.")
            return

        if message is None:
            message = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤–∞—à–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏, –¥–∞–≤–∞–π—Ç–µ –æ–±—Å—É–¥–∏–º –¥–µ—Ç–∞–ª–∏"

        for v in vacancies:
            vacancy_id = v.get("id")
            vacancy_name = v.get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

            if not vacancy_id:
                continue

            if vacancy_id in self.applied_vacancies:
                print(f"‚è© –£–∂–µ –æ—Ç–∫–ª–∏–∫–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ: {vacancy_name} (ID: {vacancy_id}) ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                continue

            url = f"{self.APPLY_URL}?vacancy_id={vacancy_id}"
            payload = {
                "message": message,
                "resume_id": self.resume_id
            }

            try:
                resp = requests.post(url, headers=self.headers, data=payload, timeout=60)
            except requests.RequestException as e:
                print(f"‚ùå Network error –Ω–∞ {vacancy_name} (ID: {vacancy_id}): {e}")
                time.sleep(delay_seconds)
                continue

            if resp.status_code == 201:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫: {vacancy_name} (ID: {vacancy_id})")
                self._save_applied_vacancy(vacancy_id)

            elif resp.status_code == 403:
                try:
                    err = resp.json()
                except Exception:
                    err = {}
                desc = (err.get("description") or "").lower()

                if "negotiations limit exceeded" in desc:
                    print("‚õî –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –æ—Ç–∫–ª–∏–∫–æ–≤. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º—Å—è.")
                    return
                elif "already applied" in desc:
                    print(f"‚ö†Ô∏è –£–∂–µ –±—ã–ª –æ—Ç–∫–ª–∏–∫ —Ä–∞–Ω–µ–µ: {vacancy_name} (ID: {vacancy_id})")
                    self._save_applied_vacancy(vacancy_id)
                elif "must process test" in desc:
                    print(f"‚è≥ –¢—Ä–µ–±—É–µ—Ç—Å—è —Ç–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {vacancy_name} (ID: {vacancy_id}) ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                else:
                    print(f"‚ùå 403 Forbidden –Ω–∞ {vacancy_name} (ID: {vacancy_id}): {desc or resp.text[:400]}")

            elif resp.status_code == 400:
                print(f"‚ùå 400 Bad Request –Ω–∞ {vacancy_name} (ID: {vacancy_id}) ‚Äî –ø—Ä–æ–ø—É—Å–∫.")
                try:
                    print("–ü—Ä–∏—á–∏–Ω–∞:", resp.json().get("description"))
                except Exception:
                    pass

            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–∏–∫–∞ {resp.status_code} -> {resp.text[:400]}")

            time.sleep(delay_seconds)


# ======================= main =======================

if __name__ == "__main__":
    # --- —Ç–≤–æ–∏ –∫—Ä–µ–¥—ã ---
    CLIENT_ID = "V2KGQ12V5C4PDHCBJBKQNAVVU4RSEE2RRAKPTDKR5OEGR8EMN28QHIRMFBFLPALS"
    CLIENT_SECRET = "JPCA65U4R3QT981HV9QI9O7GJC8DCSVD7MGU150KO0UG9BOD7PHLAGOQDRUBIO6F"
    REDIRECT_URI = "http://localhost:8081/vacancies/authorization"
    # RESUME_ID = "3ebd881cff0f5c45ad0039ed1f37754b547879"
    RESUME_ID = "d51d5a21ff0b1dc0a10039ed1f444861335a70"

    creds = OAuthCredentials(
        client_id=CLIENT_ID,
        client_secret=CLIENT_SECRET,
        redirect_uri=REDIRECT_URI
    )

    bot = HHAutoApply(creds, RESUME_ID)

    # 1) –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è (–ø–æ–ª—É—á–µ–Ω–∏–µ authorization_code –≤—Ä—É—á–Ω—É—é)
    bot.authorize()

    # 2) –û–±–º–µ–Ω code -> access_token
    bot.get_access_token()

    # 3) –ü–æ–∏—Å–∫ —Å—Ä–∞–∑—É –ø–æ —Ç—Ä—ë–º —Ä–µ–∂–∏–º–∞–º –æ–ø—ã—Ç–∞: None, 1‚Äì3, 3‚Äì6
    vacancies = bot.fetch_vacancies(
        experiences=(None, "between1And3", "between3And6"),
        area=113,
        pages=5,
        per_page=100,
        period=30,
        excluded_text=("–ú–µ–Ω–µ–¥–∂–µ—Ä, –ê–Ω–∞–ª–∏—Ç–∏–∫, –∞–Ω–∞–ª–∏—Ç–∏–∫, Data, Data Science, ML, AI, "
                       "Fullstack, LLM, Machine Learn, Full-Stack", "1–°", "Android")
    )

    print(f"üßæ –ò—Ç–æ–≥ –∫ –æ—Ç–∫–ª–∏–∫–∞–º: {len(vacancies)} –≤–∞–∫–∞–Ω—Å–∏–π.")

    # 4) –û—Ç–∫–ª–∏–∫–∞–µ–º—Å—è
    bot.apply_to_vacancies(vacancies, delay_seconds=2.0)
